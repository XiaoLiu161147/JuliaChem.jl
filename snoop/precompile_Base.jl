function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, DataType, Base.Generator{Array{Any, 1}, getfield(Base, Symbol("##248#249"))}, Base.HasShape{1}})
    precompile(Tuple{typeof(Base.expand_ccallable), Nothing, Expr})
    precompile(Tuple{typeof(Base.ccallable), typeof(identity), Type{Int}, Type{Int}, String})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Type{Int}, Symbol})
    precompile(Tuple{getfield(Base.Threads, Symbol("#@threads")), LineNumberNode, Module, Int})
    precompile(Tuple{typeof(Base.Threads._threadsfor), Expr, Expr})
    precompile(Tuple{typeof(Base.push!), Array{Type{T} where T, 1}, Type{Int}})
    precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Type{Int}})
    precompile(Tuple{typeof(Base.getindex), Tuple{Expr}, Int64})
    precompile(Tuple{getfield(Base, Symbol("#@ccallable")), LineNumberNode, Module, Int})
    precompile(Tuple{typeof(Base.MainInclude.include), String})
    precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(Base, Symbol("##248#249"))}, Base.EltypeUnknown, Base.HasShape{1}})
    precompile(Tuple{typeof((Base.Docs).docstr), Int, Int})
    precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(Base, Symbol("##248#249"))}})
end
