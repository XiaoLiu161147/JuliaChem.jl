function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(Tuple{typeof(LinearAlgebra.matmul3x3!), Base.ReinterpretArray{Float64, 2, Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, Char, Char, Base.ReinterpretArray{Float64, 2, Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, Array{Float64, 2}})
    precompile(Tuple{typeof(LinearAlgebra._generic_matmatmul!), Base.ReinterpretArray{Float64, 2, Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, Char, Char, Base.ReinterpretArray{Float64, 2, Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, Array{Float64, 2}})
    precompile(Tuple{typeof(LinearAlgebra.blockpower!), LinearAlgebra.UpperTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, LinearAlgebra.UpperTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, Float64})
    precompile(Tuple{typeof(LinearAlgebra.LAPACK.geevx!), Char, Char, Char, Char, Array{Float64, 2}})
    precompile(Tuple{typeof(LinearAlgebra.BLAS.gemm!), Char, Char, Float64, Base.ReinterpretArray{Float64, 2, Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, Array{Float64, 2}, Float64, Base.ReinterpretArray{Float64, 2, Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}})
    precompile(Tuple{typeof(LinearAlgebra.generic_norm2), LinearAlgebra.UpperTriangular{Float64, Array{Float64, 2}}})
    precompile(Tuple{typeof(LinearAlgebra._generic_matmatmul!), Array{Base.Complex{Float64}, 2}, Char, Char, Array{Base.Complex{Float64}, 2}, Array{Base.Complex{Float64}, 2}})
    precompile(Tuple{typeof(LinearAlgebra.generic_normInf), LinearAlgebra.UpperTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}})
    precompile(Tuple{typeof(LinearAlgebra.copytri!), Array{Float64, 2}, Char, Bool})
    precompile(Tuple{typeof(LinearAlgebra.matmul3x3!), Array{Base.Complex{Float64}, 2}, Char, Char, Array{Base.Complex{Float64}, 2}, Array{Base.Complex{Float64}, 2}})
    precompile(Tuple{typeof(LinearAlgebra._inv), LinearAlgebra.Hermitian{Float64, Array{Float64, 2}}})
    precompile(Tuple{typeof(LinearAlgebra.LAPACK.trtrs!), Char, Char, Char, Array{Float64, 2}, Array{Float64, 2}})
    precompile(Tuple{typeof(LinearAlgebra._generic_matmatmul!), Array{Float64, 2}, Char, Char, Array{Float64, 2}, Array{Float64, 2}})
    precompile(Tuple{typeof(LinearAlgebra.BLAS.syrk!), Char, Char, Float64, Array{Float64, 2}, Float64, Array{Float64, 2}})
    precompile(Tuple{typeof(LinearAlgebra.BLAS.trmm!), Char, Char, Char, Char, Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}, Array{Base.Complex{Float64}, 2}})
    precompile(Tuple{typeof(LinearAlgebra.matmul2x2!), Base.ReinterpretArray{Float64, 2, Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, Char, Char, Base.ReinterpretArray{Float64, 2, Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, Array{Float64, 2}})
    precompile(Tuple{typeof(LinearAlgebra.LAPACK.trtrs!), Char, Char, Char, Array{Base.Complex{Float64}, 2}, Array{Base.Complex{Float64}, 2}})
    precompile(Tuple{typeof(LinearAlgebra.BLAS.gemm!), Char, Char, Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}, Array{Base.Complex{Float64}, 2}, Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}})
    precompile(Tuple{typeof(LinearAlgebra.BLAS.herk!), Char, Char, Float64, Array{Base.Complex{Float64}, 2}, Float64, Array{Base.Complex{Float64}, 2}})
    precompile(Tuple{typeof(LinearAlgebra.LAPACK.gesdd!), Char, Array{Base.Complex{Float64}, 2}})
    precompile(Tuple{typeof(LinearAlgebra.BLAS.gemm!), Char, Char, Float64, Array{Float64, 2}, Array{Float64, 2}, Float64, Array{Float64, 2}})
    precompile(Tuple{typeof(LinearAlgebra.LAPACK.gesdd!), Char, Array{Float64, 2}})
    precompile(Tuple{getfield(LinearAlgebra, Symbol("##eigvals!#54")), Bool, Bool, typeof(identity), Array{Float64, 2}})
    precompile(Tuple{typeof(LinearAlgebra.LAPACK.gees!), Char, Array{Base.Complex{Float64}, 2}})
    precompile(Tuple{typeof(LinearAlgebra.matmul2x2!), Array{Base.Complex{Float64}, 2}, Char, Char, Array{Base.Complex{Float64}, 2}, Array{Base.Complex{Float64}, 2}})
    precompile(Tuple{typeof(LinearAlgebra.powm!), LinearAlgebra.UpperTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, Float64})
    precompile(Tuple{typeof(LinearAlgebra.generic_normp), Array{Base.Complex{Float64}, 1}, Float64})
    precompile(Tuple{typeof(LinearAlgebra.generic_normInf), Array{Base.Complex{Float64}, 1}})
    precompile(Tuple{typeof(LinearAlgebra.matmul3x3!), Array{Float64, 2}, Char, Char, Array{Float64, 2}, Array{Float64, 2}})
    precompile(Tuple{typeof(LinearAlgebra.LAPACK.getri!), Array{Float64, 2}, Array{Int64, 1}})
    precompile(Tuple{typeof(LinearAlgebra.matmul2x2!), Array{Float64, 2}, Char, Char, Array{Float64, 2}, Array{Float64, 2}})
    precompile(Tuple{typeof(LinearAlgebra.sqrt_diag!), LinearAlgebra.UpperTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, LinearAlgebra.UpperTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, Int64})
    precompile(Tuple{typeof(LinearAlgebra.generic_normInf), Array{Base.Complex{Float64}, 2}})
    precompile(Tuple{typeof(LinearAlgebra.sqrt_diag!), LinearAlgebra.UpperTriangular{Float64, Array{Float64, 2}}, LinearAlgebra.UpperTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, Int64})
    precompile(Tuple{typeof(LinearAlgebra.BLAS.dot), Array{Float64, 1}, Array{Float64, 1}})
    precompile(Tuple{typeof(LinearAlgebra.lapack_size), Char, Base.ReinterpretArray{Float64, 2, Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}})
    precompile(Tuple{typeof(LinearAlgebra.LAPACK.syevr!), Char, Char, Char, Array{Float64, 2}, Float64, Float64, Int64, Int64, Float64})
    precompile(Tuple{typeof(LinearAlgebra.ishermitian), Array{Base.Complex{Float64}, 2}})
    precompile(Tuple{typeof(LinearAlgebra.LAPACK.syevr!), Char, Char, Char, Array{Base.Complex{Float64}, 2}, Float64, Float64, Int64, Int64, Float64})
    precompile(Tuple{typeof(LinearAlgebra.invsquaring), LinearAlgebra.UpperTriangular{Float64, Array{Float64, 2}}, Array{Float64, 1}})
    precompile(Tuple{typeof(LinearAlgebra.BLAS.dot), Array{Float64, 2}, Array{Float64, 2}})
    precompile(Tuple{typeof(LinearAlgebra.invsquaring), LinearAlgebra.UpperTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, Array{Float64, 1}})
    precompile(Tuple{typeof(LinearAlgebra.copytri!), Array{Base.Complex{Float64}, 2}, Char, Bool})
    precompile(Tuple{typeof(LinearAlgebra.blockpower!), LinearAlgebra.UpperTriangular{Float64, Array{Float64, 2}}, LinearAlgebra.UpperTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, Float64})
    precompile(Tuple{typeof(LinearAlgebra.powm!), LinearAlgebra.UpperTriangular{Float64, Array{Float64, 2}}, Float64})
    precompile(Tuple{typeof(LinearAlgebra.istriu), Array{Float64, 2}, Int64})
    precompile(Tuple{typeof(LinearAlgebra.generic_norm2), LinearAlgebra.UpperTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}})
    precompile(Tuple{typeof(LinearAlgebra.opnorm1), Array{Base.Complex{Float64}, 2}})
    precompile(Tuple{typeof(LinearAlgebra.mul!), LinearAlgebra.UpperTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, LinearAlgebra.UpperTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, Float64})
    precompile(Tuple{typeof(LinearAlgebra.tril!), Array{Float64, 2}, Int64})
    precompile(Tuple{typeof(LinearAlgebra.opnormInf), LinearAlgebra.UpperTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}})
    precompile(Tuple{typeof(LinearAlgebra.opnorm1), LinearAlgebra.UpperTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}})
    precompile(Tuple{typeof(LinearAlgebra.mul!), LinearAlgebra.UpperTriangular{Float64, Array{Float64, 2}}, LinearAlgebra.UpperTriangular{Float64, Array{Float64, 2}}, Float64})
    precompile(Tuple{getfield(LinearAlgebra, Symbol("##eigen!#50")), Bool, Bool, typeof(identity), Array{Float64, 2}})
    precompile(Tuple{typeof(LinearAlgebra.opnormInf), LinearAlgebra.UpperTriangular{Float64, Array{Float64, 2}}})
    precompile(Tuple{typeof(LinearAlgebra.blockpower!), LinearAlgebra.UpperTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, LinearAlgebra.UpperTriangular{Float64, Array{Float64, 2}}, Float64})
    precompile(Tuple{typeof(LinearAlgebra.opnormInf), Array{Base.Complex{Float64}, 2}})
    precompile(Tuple{typeof(LinearAlgebra.istriu), Array{Base.Complex{Float64}, 2}, Int64})
    precompile(Tuple{typeof(LinearAlgebra.opnorm1), LinearAlgebra.UpperTriangular{Float64, Array{Float64, 2}}})
    precompile(Tuple{typeof(LinearAlgebra.generic_normMinusInf), Array{Base.Complex{Float64}, 1}})
    precompile(Tuple{typeof(LinearAlgebra.triu!), Array{Base.Complex{Float64}, 2}, Int64})
    precompile(Tuple{typeof(LinearAlgebra.rmul!), Array{Base.Complex{Float64}, 2}, LinearAlgebra.Diagonal{Base.Complex{Float64}, Array{Base.Complex{Float64}, 1}}})
    precompile(Tuple{typeof(LinearAlgebra.ishermitian), Array{Float64, 2}})
    precompile(Tuple{typeof(LinearAlgebra.generic_norm2), Array{Base.Complex{Float64}, 2}})
    precompile(Tuple{typeof(LinearAlgebra.triu!), Array{Float64, 2}, Int64})
    precompile(Tuple{typeof(LinearAlgebra.schurpow), Array{Float64, 2}, Float64})
    precompile(Tuple{typeof(LinearAlgebra.generic_norm1), Array{Base.Complex{Float64}, 1}})
    precompile(Tuple{typeof(LinearAlgebra.generic_norm2), Array{Base.Complex{Float64}, 1}})
    precompile(Tuple{typeof(LinearAlgebra._inv), LinearAlgebra.Symmetric{Float64, Array{Float64, 2}}})
    precompile(Tuple{typeof(LinearAlgebra.istril), Array{Float64, 2}, Int64})
    precompile(Tuple{typeof(LinearAlgebra.rmul!), Array{Base.Complex{Float64}, 2}, LinearAlgebra.Diagonal{Float64, Array{Float64, 1}}})
    precompile(Tuple{typeof(LinearAlgebra.rmul!), Array{Float64, 2}, LinearAlgebra.Diagonal{Float64, Array{Float64, 1}}})
    precompile(Tuple{typeof(LinearAlgebra.svdvals), LinearAlgebra.UpperTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}})
    precompile(Tuple{typeof(LinearAlgebra.gemm_wrapper!), Array{Base.Complex{Float64}, 2}, Char, Char, Array{Base.Complex{Float64}, 2}, Array{Base.Complex{Float64}, 2}})
    precompile(Tuple{typeof(LinearAlgebra.gemm_wrapper!), Array{Float64, 2}, Char, Char, Array{Float64, 2}, Array{Float64, 2}})
    precompile(Tuple{typeof(LinearAlgebra.gemm_wrapper!), Base.ReinterpretArray{Float64, 2, Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, Char, Char, Base.ReinterpretArray{Float64, 2, Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, Array{Float64, 2}})
    precompile(Tuple{typeof(LinearAlgebra.herk_wrapper!), Array{Base.Complex{Float64}, 2}, Char, Array{Base.Complex{Float64}, 2}})
    precompile(Tuple{getfield(LinearAlgebra, Symbol("##eigen#52")), Bool, Bool, typeof(identity), Array{Float64, 2}})
    precompile(Tuple{typeof(LinearAlgebra.syrk_wrapper!), Array{Float64, 2}, Char, Array{Float64, 2}})
    precompile(Tuple{typeof(LinearAlgebra.sympow), LinearAlgebra.Symmetric{Float64, Array{Float64, 2}}, Int64})
    precompile(Tuple{typeof(LinearAlgebra.diag), Array{Float64, 2}, Int64})
    precompile(Tuple{typeof(LinearAlgebra.copy_transpose!), Array{Float64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.ReinterpretArray{Float64, 2, Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
    precompile(Tuple{typeof(LinearAlgebra.copy_transpose!), Array{Float64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Float64, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
    precompile(Tuple{typeof(LinearAlgebra.generic_matmatmul!), Base.ReinterpretArray{Float64, 2, Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, Char, Char, Base.ReinterpretArray{Float64, 2, Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, Array{Float64, 2}})
    precompile(Tuple{typeof(LinearAlgebra.diag), Array{Base.Complex{Float64}, 2}, Int64})
    precompile(Tuple{typeof(LinearAlgebra.norm2), Array{Base.Complex{Float64}, 1}})
    precompile(Tuple{typeof(LinearAlgebra.norm2), Array{Base.Complex{Float64}, 2}})
    precompile(Tuple{typeof(LinearAlgebra.copy_transpose!), Array{Base.Complex{Float64}, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Array{Base.Complex{Float64}, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
    precompile(Tuple{typeof(LinearAlgebra.opnorm), LinearAlgebra.UpperTriangular{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}, Int64})
    precompile(Tuple{typeof(LinearAlgebra.opnorm), LinearAlgebra.UpperTriangular{Float64, Array{Float64, 2}}, Int64})
    precompile(Tuple{typeof(LinearAlgebra.generic_matmatmul!), Array{Float64, 2}, Char, Char, Array{Float64, 2}, Array{Float64, 2}})
    precompile(Tuple{typeof(LinearAlgebra.mul!), Array{Base.Complex{Float64}, 2}, Array{Base.Complex{Float64}, 2}, LinearAlgebra.Transpose{Float64, Array{Float64, 2}}})
    precompile(Tuple{typeof(LinearAlgebra.generic_matmatmul!), Array{Base.Complex{Float64}, 2}, Char, Char, Array{Base.Complex{Float64}, 2}, Array{Base.Complex{Float64}, 2}})
    precompile(Tuple{typeof(LinearAlgebra.eigen), LinearAlgebra.Hermitian{Base.Complex{Float64}, Array{Base.Complex{Float64}, 2}}})
    precompile(Tuple{typeof(LinearAlgebra.norm), Array{Base.Complex{Float64}, 1}, Float64})
    precompile(Tuple{typeof(LinearAlgebra.opnorm2), Array{Base.Complex{Float64}, 2}})
    precompile(Tuple{typeof(LinearAlgebra.svdvals), LinearAlgebra.UpperTriangular{Float64, Array{Float64, 2}}})
end
